{"$message_type":"diagnostic","message":"unused imports: `String` and `vec`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"contracts/crowfunding/src/test.rs","byte_start":47,"byte_end":50,"line_start":4,"line_end":4,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"use soroban_sdk::{vec, Env, String};","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/crowfunding/src/test.rs","byte_start":57,"byte_end":63,"line_start":4,"line_end":4,"column_start":29,"column_end":35,"is_primary":true,"text":[{"text":"use soroban_sdk::{vec, Env, String};","highlight_start":29,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"contracts/crowfunding/src/test.rs","byte_start":46,"byte_end":47,"line_start":4,"line_end":4,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"use soroban_sdk::{vec, Env, String};","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts/crowfunding/src/test.rs","byte_start":47,"byte_end":52,"line_start":4,"line_end":4,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"use soroban_sdk::{vec, Env, String};","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts/crowfunding/src/test.rs","byte_start":55,"byte_end":63,"line_start":4,"line_end":4,"column_start":27,"column_end":35,"is_primary":true,"text":[{"text":"use soroban_sdk::{vec, Env, String};","highlight_start":27,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"contracts/crowfunding/src/test.rs","byte_start":63,"byte_end":64,"line_start":4,"line_end":4,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"use soroban_sdk::{vec, Env, String};","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `String` and `vec`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/crowfunding/src/test.rs:4:19\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse soroban_sdk::{vec, Env, String};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `new` found for struct `CrowdfundingContract` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"contracts/crowfunding/src/test.rs","byte_start":229,"byte_end":232,"line_start":10,"line_end":10,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"    let client = CrowdfundingContract::new(&env, &contract_id);","highlight_start":40,"highlight_end":43}],"label":"function or associated item not found in `CrowdfundingContract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"contracts/crowfunding/src/lib.rs","byte_start":90,"byte_end":121,"line_start":5,"line_end":5,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"pub struct CrowdfundingContract;","highlight_start":1,"highlight_end":32}],"label":"function or associated item `new` not found for this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following traits define an item `new`, perhaps you need to implement one of them:\ncandidate #1: `crypto_common::KeyInit`\ncandidate #2: `crypto_common::KeyIvInit`\ncandidate #3: `curve25519_dalek::traits::VartimePrecomputedMultiscalarMul`\ncandidate #4: `digest::VariableOutput`\ncandidate #5: `digest::core_api::VariableOutputCore`\ncandidate #6: `digest::digest::Digest`\ncandidate #7: `digest::mac::Mac`\ncandidate #8: `gimli::read::lookup::PubStuffEntry`\ncandidate #9: `rand::distributions::uniform::UniformSampler`\ncandidate #10: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`\ncandidate #11: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`\ncandidate #12: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`\ncandidate #13: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`\ncandidate #14: `typenum::marker_traits::Bit`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `new` found for struct `CrowdfundingContract` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcontracts/crowfunding/src/test.rs:10:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let client = CrowdfundingContract::new(&env, &contract_id);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `CrowdfundingContract`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mcontracts/crowfunding/src/lib.rs:5:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CrowdfundingContract;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfunction or associated item `new` not found for this struct\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is implemented and in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following traits define an item `new`, perhaps you need to implement one of them:\u001b[0m\n\u001b[0m           candidate #1: `crypto_common::KeyInit`\u001b[0m\n\u001b[0m           candidate #2: `crypto_common::KeyIvInit`\u001b[0m\n\u001b[0m           candidate #3: `curve25519_dalek::traits::VartimePrecomputedMultiscalarMul`\u001b[0m\n\u001b[0m           candidate #4: `digest::VariableOutput`\u001b[0m\n\u001b[0m           candidate #5: `digest::core_api::VariableOutputCore`\u001b[0m\n\u001b[0m           candidate #6: `digest::digest::Digest`\u001b[0m\n\u001b[0m           candidate #7: `digest::mac::Mac`\u001b[0m\n\u001b[0m           candidate #8: `gimli::read::lookup::PubStuffEntry`\u001b[0m\n\u001b[0m           candidate #9: `rand::distributions::uniform::UniformSampler`\u001b[0m\n\u001b[0m           candidate #10: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`\u001b[0m\n\u001b[0m           candidate #11: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`\u001b[0m\n\u001b[0m           candidate #12: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`\u001b[0m\n\u001b[0m           candidate #13: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`\u001b[0m\n\u001b[0m           candidate #14: `typenum::marker_traits::Bit`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}
